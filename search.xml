<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用向导</title>
      <link href="/2025/03/23/guide/"/>
      <url>/2025/03/23/guide/</url>
      
        <content type="html"><![CDATA[<blockquote><p>📣 文档更新日期：2025 &#x2F; 3 &#x2F; 15<br>📄 通用文档，请慎重修改，引用自：\ _POST</p></blockquote><p>欢迎来到向导界面，不出意外这是您在本网站访问的第一张页面（如果不是，忽略这句话），本网站主要有三大板块：信息技术区、辅助类信息技术区、闲聊区。下面依次来介绍三大板块：</p><ol><li>信息技术区，主要包含编程、分析、构建、反编译等文档以供参考，不包含软件使用教程等次要信息学内容。</li><li>辅助类信息技术区，即软件使用教学、剪辑、P图、游戏破解与分析、个人软件构建产品的分享等等，如果您是希望学习一门技术或者了解一些使用技巧，更或许您希望搜寻别人在使用中遇到和您相近的报错时的处理办法等等，那么您就来对地方了，当然这一板块的活跃度肯定相对较高，不时就会有新帖冒出来~~</li><li>闲聊区，啥都能聊，只要不违法。当然，不要上传奶龙（</li></ol><p>如果您想快速了解这一文档社区，请访问 <strong>快速入门</strong> 这一页面进行全方位了解。</p><p>下面是站主的联系方式：</p><blockquote><p>☎️ +86 15397772198</p><p>✉️ <a href="mailto:&#x78;&#117;&#x65;&#x78;&#x69;&#97;&#x6f;&#98;&#97;&#110;&#x32;&#x33;&#55;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">xuexiaoban237@163.com</a><strong>或者</strong><a href="mailto:&#53;&#50;&#50;&#49;&#x39;&#x30;&#55;&#56;&#x30;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;">522190780@qq.com</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 官网公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++快速入门</title>
      <link href="/2025/03/23/cppfirstcourse/"/>
      <url>/2025/03/23/cppfirstcourse/</url>
      
        <content type="html"><![CDATA[<blockquote><p>📣 文档更新日期：2025 &#x2F; 3 &#x2F; 16<br>📄 NSPD官方教程，引用自：\ _POST</p><p>⛔ 未经允许禁止转载<br>⚠️ 建设中，不代表最终呈现效果</p></blockquote><blockquote><p>✅ 课程简介：</p><p>《 Rapid Learn of C++ 》是<strong>NSPD</strong>的第一个系列课程文档，针对于刚接触C++不久或者没有学习过C++的同学建设，顾名思义，这仅仅是C++学习中比较微不足道的一个入门级部分。C++的学习难度和成本一直都居于前列，所以，如果您是刚学习编程或者对计算机程序构建没有充分了解的小白，C++的学习肯定会伴随着快乐与疑惑不解。本课程专门为了改善这一高门槛编程语言的学习难度，我们会采用理论与实践结合的方式，每一章从一个小程序开始，用本章所学所讲来逐步提升这一小程序的整体功能，寓教于乐，综合提升。</p></blockquote><blockquote><p>✅ 本课程主要会包括而不限于下列基础内容：</p><ol><li><p>C++是什么</p></li><li><p>环境配置与调试</p></li><li><p>C++基本数据类型</p></li><li><p>C++的输入输出功能</p></li><li><p>操作数和运算符</p></li><li><p>流跳转</p></li><li><p>程序控制分支</p></li><li><p>C++中级数据类型</p></li><li><p>基本函数功能</p></li></ol><p>……</p></blockquote><blockquote><p>编者：LZJFR-EDENCREATER-</p><p>插图：LZJFR-EDENCREATER-</p></blockquote><h1 id="CHAPTER-1-C-是什么"><a href="#CHAPTER-1-C-是什么" class="headerlink" title="CHAPTER 1 | C++是什么"></a><strong>CHAPTER 1</strong> | C++是什么</h1><p>▶️ 在这章您将会了解到：</p><ol><li><p>C++的前世今身</p></li><li><p>C++学习之路该怎么走？</p></li></ol><hr><p>​说到C++大家应该不陌生，它拥有一套极其丰富并且繁琐复杂的知识体系。可为什么叫做 “C++” 而不是 “C” 或者其他的名字呢，我们认识到，C++实则是由一种叫做C的编程语言进化而来，所以，您如果学习了C++，C语言的内容您就大致掌握了，此乃一举两得之事，不过编者想告诉您，这两种语言虽是同门出生，但在两种语言的性质和编程思维上却天差地别。</p><p>​我们想要了解C++，不如我们先来了解一下C。</p><p>​C语言是一门高级编程语言，有多高级呢？其实没多高级😅，所谓的 “高级” 是指的相对于C语言之前的众多编程语言要更加简洁高效、功能丰富、语法完善，并且还有一套自己的“库”，也就是给程序员提供的一种便携工具包，这里面包含了加减乘除、输出输入、随机数字等众多高级功能，用户可以将这些原本需要成百上千行的代码操作对应到一句小小的话里，更或者一个符号里，是不是听起来很诱人？那么我们再来了解一下那些早期编程语言的发挥吧：</p><p>​汇编语言，就是一种复杂且原始的编程语言，以下是一段汇编语言：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">SUMDW ?</span><br><span class="line">DATA ENDS</span><br><span class="line">STACK SEGMENT STACK</span><br><span class="line">DB200DUP(0)</span><br><span class="line">STACK ENDS</span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE,DS:DATA,SS:STACK</span><br><span class="line">START:MOVAX,DATA</span><br><span class="line">MOVDS,AX 1️⃣</span><br><span class="line">MOVAX,0</span><br><span class="line">MOVCX,100</span><br><span class="line">LOP1:ADDAX,CX</span><br><span class="line">LOOP LOP1</span><br><span class="line">MOVSUM,AX</span><br><span class="line">MOVAX,4CH 1️⃣</span><br><span class="line">INT 21H</span><br><span class="line">CODEENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p>​您知道这一段飞龙代码实现的是什么操作吗？编者告诉你，这仅仅是想实现从1开始，一直加到100的总求和。读者也许会感觉到，满篇的数字字母交相辉映，令人眼花缭乱。这其实也是有原因的，更早期的语言只采用01代码来进行功能的实现。也就意味着人很难去读懂这一类只有两个数字交替出现的代码，除非您是一位高级分析师，否则您看一会儿就看晕了。</p><p>​后来出现了汇编语言，所谓“汇编”，就类似于上文所述的“库”，它将一套很复杂的二进制代码浓缩到一个单词上，而用户仅需打出这个单词就能调用这个单词背后的一整座代码山所对应的操作，就像图中1️⃣处那两行开头的<strong>MOV</strong>操作符一样（本文不讨论低级编程，所以不解释这啥意思）极大地简化了操作。例如将两个数相加，可能用01代码就需要上百行，但汇编语言将这一操作浓缩到一个<strong>ADD</strong>操作符上，用户仅仅通过使用这一个单词就可以实现加法操作，是不是很简单？</p><p>​可这并不是最简单的方案，汇编语言依赖于内存处理与指针编程，您可以想象一下，我为了将一个数字从一块内存上转移到另一块内存上，需要反复地调用内存寄存器（也就是将一个数零时存放的地方），因为在汇编语言的体系里，操作一个数，例如将它乘以10，就需要先将它转移到一块特定的内存上，再进行操作。别见怪，这恰恰符合了计算机内存的基本原则，才能有条不紊的进行这些操作；否则，在遇到大量的乘法运算时，如果不把这些数字集中到一块内存上，很容易发生意想不到的错误。为了简化一系列的内存转移操作，新一代（第三代）编程语言诞生了，就像C、C++这样的“高级”编程语言。</p><p>​如果说将01代码转换为一个操作符是实现了浓缩代换，那么将一系列经过代换的操作符集合成一个全新的单词就更加高级了。有人说那这样无限代换会不会产生一定的混乱感？例如：从1加到100如果代换为一个单词，比如<code>one_to_hundred</code>，那么按照这个逻辑，实现这样一个操作就只需要输入该单词即可。但，这真的有必要吗？如果这样，我要从1加到500是否就需要一个<code>one_to_500</code>呢？从1加到1000呢？这样效率太过低下，我会为了实现这一系列的操作而设定一系列的 “代换单词” ，以至于到最后我也不明白那个单词对应哪种操作，人们会为了寻求简便而开发出成千上万的这样的单词，每次写代码第一想到的是操作对应的单词是什么，而不是到底应该实现怎样的逻辑才能看到我想要的效果，这违背了代码的自定义化，局限了大部分的操作体系，就像八股文一样，极力追寻简便往往会适得其反。</p><p>​每个人写作文都有自己的风格，有的人严肃，有的人诙谐。但无论怎样，他们为了表达同一个观点而写文章，这所表现出来的影响一定是相同的。类似地，高级编程语言一定是像写文章一样，只要语法正确逻辑正确怎样写都没问题。用户想实现一个加法操作也可以按照自己的想法写了，不用在那里乱转寄存器。用户可以像写一段话一样写一行代码，再将你写的代码拿去编译。编译，一种高级操作，通俗来讲也就是将外语翻译一遍变成本地语言的文章，类似于 “本地化” ，你写的程序就像这里的外语，编译就像翻译一样，将你所熟悉的语言转化为计算机所熟悉的语言，例如汇编语言等相对低级的语言。这样，你写出来的代码和之前的汇编代码所产生的效果就一模一样了。</p><p>从上面的一段话可以看出来，想要实现高级编程语言的创造，就必须要具备：</p><ol><li>编译器，也就相当于翻译员，把你的高级语言降级到低级语言。</li><li>语法检测器，也就是相当于英语阅卷老师一样的语法检查官，如果你写了一段错误的代码，甚至可能是对计算机有害的代码，语法检测器将阻止编译器编译，更高级的，还会指出你的错误，记住，它只能检测语法错误，不能检测逻辑错误，不要指望它为你检测出代码逻辑上的错误，就像法官只按法律审判，而不管人情世故。</li></ol><p>C语言完美的兼容了以上所有特性，它拥有<strong>GCC编译器</strong>，用来转换程序；也有一系列的语法检测算法来检测语法错误。</p><p>​那C++又更高级在哪里呢？拥有相同的工具，又是同源出生，唯一不同之处便是他们的编程宗旨和内部算法的升级，例如，C语言中的输入输出是靠两个函数（后面再介绍，你就理解成一种高级版的浓缩单词吧）进行的，而C++是靠模板类（ 一种高度自定义的操作集合体，本文档不讨论C++的OOP编程 ）进行输入输出的，并且还新增了流缓存区这一功能，让输入输出更加简便安全。</p><p>​这样看，C++确实是比C要更加高级方便，C++还广泛用于游戏、家电、汽车、服务器等多种领域，读者如果没有很强的体会也无关系，后面的教程将增强两者的差异。您只需要知道C++的来历和优越性。</p><p>​接下来看看C++的开发者吧：</p><p>​C++是一种计算机高级程序设计语言，最早于<strong>1979</strong>年由<strong>本贾尼·斯特劳斯特卢普</strong>在<strong>AT&amp;T贝尔工作室</strong>研发。不得不说，这人是个天才。</p><p>​C++还在持续发展与更新，从1979年到您在阅读这句话的那个瞬间，C++的标准制定者们无时无刻不在开发C++的新功能，并舍弃C++的一些旧功能，您需要认识到的是，C++的不同版本会有一些细微的差异，这是很正常的。文档主要使用最新版的C++，您需要兼容一部分的功能才能与文档一致。</p><blockquote><p><strong>尾声</strong></p><p>从汇编语言到C++，经过了几代人的不懈付出。如今您的计算机、手机、甚至是冰箱处处都有C++的影子，可见，C++的普及性一定超过了 本贾尼·斯特劳斯特卢普 的预期。但是，站主想告诉您，信息技术始终是发展并且交融的新世纪科学，这难免会有迭代与消亡。C++并不意味着高级，因为C#已经出现了；汇编不意味着低级，因为它在丧失通用特性的同时大大增加了代码的自定义化。学习C++，不能只是学习它的基本知识，更要了解它的历史与基本特性，并用其他编程语言的知识来更加充分的了解C++，这样，您收获的，将是远远超出C++本身的东西。</p></blockquote><hr><h1 id="CHAPTER-2-C-编程的环境配置与调试"><a href="#CHAPTER-2-C-编程的环境配置与调试" class="headerlink" title="CHAPTER 2 |C++编程的环境配置与调试"></a><strong>CHAPTER 2</strong> |C++编程的环境配置与调试</h1><p>▶️ 在这章您将会了解到：</p><ol><li><p>C++编程环境的配置</p></li><li><p>C++编程环境的调试</p></li><li><p>C++编程的原理</p></li></ol><hr><h2 id="2-1-C-编程环境的配置"><a href="#2-1-C-编程环境的配置" class="headerlink" title="2.1 C++编程环境的配置"></a>2.1 C++编程环境的配置</h2><p>首先，一位优秀的程序创作者应该知道，他要开发的项目一定要对应一种编程语言，例如游戏创作可以选择<strong>C#(Unity)</strong>、<strong>C++(cocos-2d)</strong>；网页设计可以用HTML、css、Java等。那么如果他选择使用C++来进行一系列的开发，就必须要有对应的开发工具，就像制作雕塑需要刻刀、画素描画需要H、HB、B数种型号的铅笔……C++也是如此，如果我要写一段C++的代码，从本质上来说，代码就相当于一段人能看懂的话，C++环境在这里的作用就是将这段话编译（一种人机翻译，在第一章讲过）出来，交给计算机去处理你说的这段话，最后达到您想实现的效果。</p><p>在第一章，我们提到过一种<strong>GCC编译器</strong>，它的作用这里不再概述，不过编者想告诉您的是，GCC是一种针对于C语言的编译环境工具，我们强调C++是一种与C形式相近，而截然不同的高级语言，所以，对于C++的编译，我们会用到<strong>G++编译器</strong>。这是专门适用于C++的编译器，从百度谷歌等平台可以搜索并下载这一工具。</p><p>延续上一章没说完的，既然在源代码与成品文件之间存在一种编译关系，也就是说，编译工具将您写的代码转换为机器码并生成出一类叫做可执行文件（例如.exe文件、.bat文件）的成品文件来对应您想实现的功能，从而实现了用户可以通过成品文件来直接使用您开发的软件而非将您的源代码下载下来手动编译一遍。这种做法的好处在于，可以有效避免用户将您的代码进行传播侵权，违法修改，还可以让用户仅仅双击一下鼠标就可以开始使用。总而言之，编译器将您的代码进行编译并加密。下面是一幅编译流程图：</p><img src="https://www.helloimg.com/i/2025/03/30/67e8d8ba72b35.png" style="zoom:90%;" /><p>在C++中，源文件的扩展名为：<strong>.cpp</strong>，所以，您只需要新建一个空白文档，取一个好听的名字（最好只包含数字字母）将后缀从<strong>txt</strong>改为<strong>cpp</strong>，无视风险，就可以创建一个最简单的、没有任何内容的源文件了，当然，它的本质还是一个文档文件，没有任何功能和内容，就算进行编译也会失败，后面我们将教您如何编译它。</p><p>现在市面上的编程环境主要分为 <strong>集成开发环境 (IDK)</strong> 和 <strong>非集成开发环境</strong>，前者较为简单，只需要下载一款软件或者执行一段Shell脚本即可使用，例如<strong>Visual Studio</strong>、<strong>Dev Cpp</strong>等，您可以自行从官网下载，这里不多概述。</p><p>非集成开发环境指的是分散性的一系列工具组成的环境，在使用时往往缺少一键生成、一键编译等功能，相对繁琐，需要用户使用命令行工具进行手动编译，并且无法直观查错、分析，只有等待编译时的报错信息才能确定程序问题，这里也不多概述。</p><p>还有一种便是半集成型环境，指的是将非集成开发环境嵌入<strong>集成开发工具(IDE)</strong> 中，类似于将环境嵌入模板中，这块模板可以接纳很多诸如此类的非集成环境，使用难度低于非集成开发，高于集成开发，我们着重讲这一类环境的配置：</p><blockquote><p>以开发软件 <strong>VS Code</strong> 为例，一步步来带领您配置环境。</p><p>首先，请在<a href="https://code.visualstudio.com/">官网</a>下载VS Code 。而后，安装C++插件。如果您不习惯英文，还可以安装汉语插件包，重启应用即可。</p><blockquote><p><strong>安装 C++ 扩展</strong>： 打开 VS Code，按下 Ctrl+Shift+X 打开扩展视图。 搜索 C++，找到 C&#x2F;C++ 扩展并点击安装。</p></blockquote><p>安装好插件以后，需要继续安装 <strong>MinGW-W64</strong>（ <strong>Minimalist GNU for Windows</strong> x64），一款开源编译环境，免费无污染。可以从<a href="https://github.com/msys2/msys2-installer/releases/">Github</a>下载（需要加速器），也可以直接从Github仓库克隆到本地。后者请学习《Github基础教程》或者有一定了解后再使用，上手难度较大。</p><blockquote><p><strong>安装 MinGW-W64</strong>： 前往 MinGW-W64 GitHub 页面下载最新版本的安装程序，下载是…x86_64…exe的即可。 双击运行安装程序，按照提示完成安装，安装在C盘最好，且用户名不要是中文，否则经常会遇到无法解决或意想不到的问题，<strong>安装完成后勾选立即运行会弹出终端窗口，请不要退出，以供继续下一步安装。</strong></p></blockquote><p>安装完成弹出终端以后，输入下面的命令行以继续：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain</span><br></pre></td></tr></table></figure><p>安装过程中会询问是否继续和安装多少包体，输入回车或”y”即可继续，安装完成后，关闭界面，进入下载到的文件夹中，进入<code>...\msys64\ucrt64\bin</code>文件夹，复制该文件夹的路径。</p><p>在Windows系统的搜索框中输入 <code>编辑系统环境变量</code>，打开编辑系统环境变量的设置界面，在下方找到<code>环境变量</code>一项，点击打开界面，选中并双击 <strong>Path变量</strong> 。进入Path后，点击右侧的<strong>新建</strong>，输入刚才复制的地址（需要绝对地址），确认并关闭，最后在主界面点击确认完成环境变量的配置。</p><p><img src="https://www.helloimg.com/i/2025/03/30/67e8eaa0aaf89.png"></p><p>为确认环境的配置成功，打开命令提示符(cmd)，输入如下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line">gdb --version</span><br></pre></td></tr></table></figure><p>如果出现相关信息，则表示安装成功。</p><p>安装完成后，即可以进入VS code进行编程与学习，本教材不包含软件使用教程，请自行查阅资料上手您要选择的编程软件进行学习。</p></blockquote><p>本教学文档进行的是通用教学，即无视各种软件带来的特性差异，<strong>如果您在某个时刻发现自己看到的现象与本文档的记述不相符合，极有可能是您的电脑配置差异与使用的软件差异造成的。</strong></p><h2 id="2-2-C-编程环境的调试与文件编译原理"><a href="#2-2-C-编程环境的调试与文件编译原理" class="headerlink" title="2.2 C++编程环境的调试与文件编译原理"></a>2.2 C++编程环境的调试与文件编译原理</h2><p>一个完整的C++编译过程总共包含以下四个过程：</p><ul><li>编译预处理阶段，使用命令<code>g++ -E</code>执行</li><li>编译阶段，使用命令<code>g++ -S</code>执行</li><li>汇编阶段，使用命令<code>as</code> 或者命令<code>g++ -c</code>执行</li><li>链接阶段，使用命令<code>g++ xxx.o xxx.so xxx.a</code>执行</li></ul><p>打开您在上一小节选择的编程软件，新建一个.cpp文件并命好名称（最好只包含字母与数字），如果您使用的是<strong>Visual Studio</strong>一类的项目或解决方案类型的IDE，可以选择“控制台应用”一项创建。创建好之后，复制如下代码到cpp文件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制好后，保存并退出。</p><p>虽然现代集成开发软件自带一键调试编译的功能，您依然需要知道如何手动操作这一过程，以应对后面的学习。</p><h3 id="2-2-1-预编译"><a href="#2-2-1-预编译" class="headerlink" title="2.2.1 预编译"></a>2.2.1 预编译</h3><p>C++是一种高级编程语言，需要再次强调的是，它虽然从C语言中来，但依然拥有与其相兼容的功能，预编译就是其中之一。</p><p>C++源代码需要经历几个步骤才能到达最后的成品文件，第一个步骤就是预编译。预编译是指将源代码文件中的某些文字转化成具有同等作用效果的文字（类似于扩句，让句子更详细完整有风度，只不过是把这一行为给电脑看而已），这一步旨在让一些语句所表达的意义更具体、更符合计算机的底层逻辑（没理解到也没关系，后续将深入讨论该点）；或者将文件中的一些特殊标记提取出来，以备后面步骤的识别等。总之，预编译就是将源代码转换得更加清晰、完整，使之与电脑功能相对应。当然，预编译的作用很重要，如果没有这一步骤，后面的步骤将很难进行。</p><blockquote><p>打开键入如下命令：<code>g++ -E [name].cpp [name].h -o [name].ii</code>，其中**[name]**表示文件名。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C++教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSPD 2025·1st Document Writing Course</title>
      <link href="/2025/03/16/2025course1/"/>
      <url>/2025/03/16/2025course1/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛须知"><a href="#比赛须知" class="headerlink" title="比赛须知"></a><strong>比赛须知</strong></h1><p><strong>NSPD 2025·1st Document Writing Course</strong> 是 NSPD 举办的第一届文档写作大赛，目的是丰富 NSPD 文档库的教学内容，使用户能更好的享受本文档站点所提供的计算机教学。</p><p>一、参赛方式：</p><p>将以下这段话发送至 <a href="mailto:&#x78;&#117;&#x65;&#120;&#x69;&#x61;&#x6f;&#x62;&#x61;&#x6e;&#x32;&#x33;&#x37;&#64;&#49;&#54;&#51;&#x2e;&#99;&#x6f;&#109;">xuexiaoban237@163.com</a> ：</p><blockquote><p>我愿意参加 <strong>NSPD 2025·1st Document Writing Course</strong> ，并且愿意贡献出自己的文档以作教学用，本人所作文档的全部内容由本人授权保管，不可为它人所转载，额外费用由我自行承担。</p></blockquote><p>请在邮件最后加上您的名字，QQ 或者 WeChat 号码以供发行使用，我们会在两周内回复您。</p><p>二、比赛时间：</p><p>【 <strong>2025 &#x2F; 3 &#x2F; 17 - 08 ：59</strong> 】  -  【 <strong>2025 &#x2F; 12 &#x2F; 21 - 08 ：59</strong> 】（ 北京时间 ）</p><p>请在规定时间内报名与上传比赛文档，逾期将不再受理。</p><p>三、比赛内容要求：</p><p>报名以后才可参加，参赛者需要阅读完 <strong>快速入门</strong> 一章节的内容，了解本网站的基本模式。</p><p>您可以撰写的文档<strong>仅可以包括</strong>下列内容：</p><ol><li>编程教学类文档</li><li>软件使用教程</li><li>程序分析教学（ <strong>源码分析、逆向分析</strong> ）</li><li>计算机知识基础教学（ <strong>二进制 、注册表、磁盘管理、CMD、PowerShell等</strong> ）</li></ol><p>超出规定内容的文档不受理。</p><p><strong>以上为比赛须知，请仔细阅读，最终解释权为 NSPD 所有，违反规定的后果请自行承担。</strong></p><hr><p>—— NSPD Article Team 2025, 3.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 官网公告 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
